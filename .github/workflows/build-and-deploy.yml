name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: 10.9.8.122:5000
  IMAGE_NAME: sourdough-docs

jobs:
  build-and-push:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Generate build metadata
      id: meta
      run: |
        # Generate version tag based on commit SHA and timestamp
        VERSION="${{ github.sha }}-$(date +%Y%m%d%H%M%S)"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
        # Generate tags
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
        else
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
        fi
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
    
    - name: Build Docker image
      run: |
        # Get git information for build
        GIT_COMMIT=$(git rev-parse --short HEAD)
        GIT_DATE=$(date '+%Y-%m-%d')
        
        # Build the Docker image with all tags and git info
        for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' ' '); do
          docker build \
            --build-arg GIT_COMMIT="${GIT_COMMIT}" \
            --build-arg GIT_DATE="${GIT_DATE}" \
            -t "${tag}" .
        done
    
    - name: Test image
      run: |
        # Test that the image runs
        docker run --rm -d --name test-container -p 8080:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        sleep 5
        # Check if nginx is responding
        curl -f http://localhost:8080 || (docker logs test-container && exit 1)
        docker stop test-container
    
    - name: Push to registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      run: |
        # Login to registry using credentials from GitHub secrets
        echo "${REGISTRY_PASSWORD}" | docker login ${{ env.REGISTRY }} -u "${REGISTRY_USERNAME}" --password-stdin
        
        # Push all tags to the registry
        for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' ' '); do
          echo "Pushing ${tag}..."
          docker push "${tag}"
        done
    
    - name: Deploy to Docker Swarm
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Deploy to swarm via SSH
        SWARM_MANAGER="10.9.8.120"
        
        echo "🚀 Deploying to Docker Swarm via SSH to manager..."
        
        # Copy the swarm compose file to the manager
        scp docker-compose.swarm.yml m@${SWARM_MANAGER}:/tmp/
        
        # Update the service to use the new image
        ssh m@${SWARM_MANAGER} << EOF
          set -e  # Exit on any error
          
          echo "🔧 Docker Swarm deployment starting..."
          
          # Login to registry on manager (required for --with-registry-auth)
          echo "📋 Logging into registry on manager..."
          echo "${{ secrets.REGISTRY_PASSWORD }}" | sudo docker login ${{ env.REGISTRY }} -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin
          
          # Show current state before update
          echo "📊 Current service state:"
          sudo docker service ls | grep sourdough || echo "No sourdough services found"
          
          # Check if stack exists
          if sudo docker stack ls | grep -q sourdough; then
            echo "🔄 Stack exists - updating service..."
            
            # Show current image being used
            echo "📋 Current service image:"
            sudo docker service inspect sourdough_sourdough-docs --format '{{.Spec.TaskTemplate.ContainerSpec.Image}}' || echo "Failed to get current image"
            
            # Skip manual pull - let swarm handle it with --with-registry-auth
            echo "📥 Skipping manual pull - using swarm registry auth..."
            
            # Update service with force flag and proper registry auth
            echo "🚀 Executing service update command..."
            sudo docker service update \
              --with-registry-auth \
              --force \
              --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
              sourdough_sourdough-docs
            
            echo "✅ Service update command completed - waiting for rollout..."
            
            # Wait and show update progress
            for i in {1..30}; do
              sleep 2
              echo "⏳ Update progress (${i}/30):"
              sudo docker service ps sourdough_sourdough-docs --no-trunc --format "table {{.Name}}\t{{.Image}}\t{{.CurrentState}}\t{{.Error}}" | head -3
              
              # Check if update is complete
              if sudo docker service ps sourdough_sourdough-docs --filter desired-state=running --format "{{.CurrentState}}" | grep -q "Running"; then
                echo "✅ Service successfully updated and running"
                break
              fi
            done
            
          else
            echo "🚀 No existing stack - deploying new..."
            sudo docker stack deploy --with-registry-auth -c /tmp/docker-compose.swarm.yml sourdough
          fi
          
          # Clean up
          rm /tmp/docker-compose.swarm.yml
          
          # Wait for service to stabilize
          echo "Waiting for service to update..."
          sleep 10
          
          # Verify deployment
          sudo docker service ps sourdough_sourdough-docs --no-trunc | head -5
          
          # Check if service is running
          if sudo docker service ls | grep -q "sourdough_sourdough-docs.*1/1"; then
            echo "✅ Service successfully updated and running"
          else
            echo "⚠️ Service may still be updating, check status manually"
          fi
        EOF
        
        echo "✅ Deployed to Swarm via remote manager"
    
    - name: Output deployment info
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "### 🚀 Docker Image Deployed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Swarm Deployment:** ✅ Deployed to swarm-worker-2" >> $GITHUB_STEP_SUMMARY
        echo "**Access URL:** http://10.9.8.122:8081" >> $GITHUB_STEP_SUMMARY