name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: 10.9.8.121:5000
  IMAGE_NAME: sourdough-docs

jobs:
  build-and-push:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Generate build metadata
      id: meta
      run: |
        # Generate version tag based on commit SHA and timestamp
        VERSION="${{ github.sha }}-$(date +%Y%m%d%H%M%S)"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
        # Generate tags
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
        else
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
        fi
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
    
    - name: Build Docker image
      run: |
        # Build the Docker image with all tags
        for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' ' '); do
          docker build -t "${tag}" .
        done
    
    - name: Test image
      run: |
        # Test that the image runs
        docker run --rm -d --name test-container -p 8080:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        sleep 5
        # Check if nginx is responding
        curl -f http://localhost:8080 || (docker logs test-container && exit 1)
        docker stop test-container
    
    - name: Push to registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      run: |
        # Login to registry with credentials from GitHub secrets
        echo "${REGISTRY_PASSWORD}" | docker login --username "${REGISTRY_USERNAME}" --password-stdin 10.9.8.121:5000
        
        # Push all tags to the registry
        for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' ' '); do
          echo "Pushing ${tag}..."
          docker push "${tag}"
        done
        
        # Use a timestamp-based tag for guaranteed uniqueness
        UNIQUE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}"
        echo "UNIQUE_IMAGE=${UNIQUE_TAG}" >> $GITHUB_ENV
        echo "Unique image tag: ${UNIQUE_TAG}"
    
    - name: Deploy to Docker Swarm
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Deploy to swarm via SSH
        SWARM_MANAGER="10.9.8.120"
        
        echo "🚀 Deploying to Docker Swarm via SSH to manager..."
        
        # Copy the swarm compose file to the manager and update image tag
        scp docker-compose.swarm.yml m@${SWARM_MANAGER}:/tmp/
        
        # Update compose file to use unique image tag
        ssh m@${SWARM_MANAGER} "sed -i 's|image: 10.9.8.121:5000/sourdough-docs:latest|image: ${UNIQUE_IMAGE}|' /tmp/docker-compose.swarm.yml"
        
        # Update the service to use the new image
        ssh m@${SWARM_MANAGER} << EOF
          # Login to registry
          sudo /etc/docker/creds/login-registry.sh
          
          # Check if stack exists
          if sudo docker stack ls | grep -q sourdough; then
            echo "Updating existing stack..."
            
            # Update service with unique timestamped image to force pull
            echo "Updating service with unique image: ${UNIQUE_IMAGE}"
            sudo docker service update --force --with-registry-auth --image "${UNIQUE_IMAGE}" sourdough_sourdough-docs
          else
            echo "Deploying new stack..."
            sudo docker stack deploy --with-registry-auth -c /tmp/docker-compose.swarm.yml sourdough
          fi
          
          # Clean up
          rm /tmp/docker-compose.swarm.yml
          
          # Wait for service to stabilize
          echo "Waiting for service to update..."
          sleep 10
          
          # Verify deployment
          sudo docker service ps sourdough_sourdough-docs --no-trunc | head -5
          
          # Check if service is running
          if sudo docker service ls | grep -q "sourdough_sourdough-docs.*1/1"; then
            echo "✅ Service successfully updated and running"
          else
            echo "⚠️ Service may still be updating, check status manually"
          fi
        EOF
        
        echo "✅ Deployed to Swarm via remote manager"
    
    - name: Output deployment info
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "### 🚀 Docker Image Deployed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Swarm Deployment:** ✅ Deployed to swarm-worker-2" >> $GITHUB_STEP_SUMMARY
        echo "**Access URL:** http://10.9.8.122:8081" >> $GITHUB_STEP_SUMMARY